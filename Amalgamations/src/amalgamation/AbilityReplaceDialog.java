/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amalgamation;
import amalgamation.abilities.*;

/**
 * 
 * 
 * @author Caleb Rush
 */
public class AbilityReplaceDialog extends javax.swing.JDialog {
    // The Amalgamation whose moveset should be modified.
    private final Amalgamation amalgamation;
    // The Ability to attempt to teach the Amalgamation.
    private final amalgamation.abilities.Ability ability;
    
    /**
     * Creates new form AbilityReplaceDialog
     */
    private AbilityReplaceDialog(java.awt.Frame parent, 
            Amalgamation amalgamation, amalgamation.abilities.Ability ability) {
        super(parent, true);
        initComponents();
        
        this.amalgamation = amalgamation;
        this.ability = ability;
        initLayout();
        pack();
        setLocationRelativeTo(parent);
    }

    // <editor-fold desc="GUI Variables" defaultstate="collapsed">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        Move1Panel = new javax.swing.JPanel();
        Move2Panel = new javax.swing.JPanel();
        Move3Panel = new javax.swing.JPanel();
        NewMovePanel = new javax.swing.JPanel();
        Move4Panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Click the Ability you would like to remove"));

        Move1Panel.setLayout(new java.awt.GridLayout());

        Move2Panel.setLayout(new java.awt.GridLayout());

        Move3Panel.setLayout(new java.awt.GridLayout());

        NewMovePanel.setLayout(new java.awt.GridLayout());

        Move4Panel.setLayout(new java.awt.GridLayout());

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Move1Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Move3Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Move2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Move4Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(NewMovePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Move1Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Move2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Move3Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Move4Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewMovePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Move1Panel;
    private javax.swing.JPanel Move2Panel;
    private javax.swing.JPanel Move3Panel;
    private javax.swing.JPanel Move4Panel;
    private javax.swing.JPanel NewMovePanel;
    private javax.swing.JPanel Panel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // Creates all of the AbilityPanels from the Abilities.
    private void initLayout() {
        if (amalgamation.getAbilities()[0] != null) {
            AbilityPanel panel = new amalgamation.abilities.AbilityPanel(
                            amalgamation.getAbilities()[0]);
            panel.setClickAction(() -> {
                amalgamation.replaceAbility(ability, 0);
                setVisible(false);
            });
            Move1Panel.add(panel);
        }
        
        if (amalgamation.getAbilities()[1] != null) {
            AbilityPanel panel = new amalgamation.abilities.AbilityPanel(
                            amalgamation.getAbilities()[1]);
            panel.setClickAction(() -> {
                amalgamation.replaceAbility(ability, 1);
                setVisible(false);
            });
            Move2Panel.add(panel);
        }
        
        if (amalgamation.getAbilities()[2] != null) {
            AbilityPanel panel = new amalgamation.abilities.AbilityPanel(
                            amalgamation.getAbilities()[2]);
            panel.setClickAction(() -> {
                amalgamation.replaceAbility(ability, 2);
                setVisible(false);
            });
            Move3Panel.add(panel);
        }
        
        if (amalgamation.getAbilities()[3] != null) {
            AbilityPanel panel = new amalgamation.abilities.AbilityPanel(
                            amalgamation.getAbilities()[3]);
            panel.setClickAction(() -> {
                amalgamation.replaceAbility(ability, 3);
                setVisible(false);
            });
            Move4Panel.add(panel);
        }
        
        if (ability != null) {
            AbilityPanel panel = new amalgamation.abilities.AbilityPanel(
                            ability);
            panel.setClickAction(() -> setVisible(false));
            NewMovePanel.add(panel);
        }
    }
    
    /**
     * Displays a dialog displaying the given Amalgamation's Abilities along
     * with the given Ability. The user is given the choice of replacing one
     * of the listed Abilities with the given Ability. 
     * 
     * @param parent the JFrame to display the dialog in
     * @param amalgamation the Amalgamation to modify
     * @param ability the Ability to replace with
     */
    public static void showAbilityReplaceDialog(javax.swing.JFrame parent,
            Amalgamation amalgamation, Ability ability) {
        // Prompt the user before displaying the dialog.
        if (javax.swing.JOptionPane.showConfirmDialog(parent, 
                String.format("%s can learn the ability %s.\n\n"
                        + "Would you like %s to forget one of its abilities "
                        + "to learn %s?", amalgamation.getName(), 
                        ability.getName(), amalgamation.getName(), 
                        ability.getName()))
                == javax.swing.JOptionPane.YES_OPTION)
            // Display the dialog.
            new AbilityReplaceDialog(parent, amalgamation, ability)
                    .setVisible(true);
    }
    
    public static void main(String[] args) {
        Amalgamation a = Amalgamations.load("Ama Gam");
        a.addAbility(Abilities.load("Kick"));
        a.addAbility(Abilities.load("Punch"));
        //a.addAbility(Abilities.load("Trip"));
        a.addAbility(Abilities.load("Leg"));
        showAbilityReplaceDialog(null, a, Abilities.load("For Glory"));
    }
}
