package amalgamation;

/**
 * The AmalgamationCreatorDialog allows the user to construct an Amalgamation
 * using all of the available Part resources. The Amalgamations created are
 * saved as Amalgamation resource files.
 * 
 * @author Caleb Rush
 */
public class AmalgamationCreatorDialog extends javax.swing.JDialog {
    // The Body being constructed in he Dialog.
    private amalgamation.parts.Body body;
    
    /**
     * Creates new form AmalgamationCreatorDialog
     */
    private AmalgamationCreatorDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        // Center the dialog on the parent.
        setLocationRelativeTo(parent);
        
    }

    // <editor-fold desc="GUI Variables" defaultstate="collapsed">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InstructionsLabel = new javax.swing.JLabel();
        BodyPanel = new javax.swing.JPanel();
        NamePanel = new javax.swing.JPanel();
        NameLabel = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        DisplayPanel = new javax.swing.JPanel();
        PartsPane = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        InstructionsLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        InstructionsLabel.setForeground(new java.awt.Color(255, 0, 0));
        InstructionsLabel.setText("Design an Amalgamation by choosing all of the parts that will make it up. Changing the body type will change the type of other body parts that are available.");

        BodyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Body Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB Demi", 1, 14), new java.awt.Color(51, 153, 255))); // NOI18N
        // Add the list of Bodies to the BodyPanel.
        amalgamation.parts.PartListPanel BodyList
        = new amalgamation.parts.PartListPanel(
            amalgamation.parts.Parts.TYPE_BODY);
        BodyPanel.add(BodyList);
        // Set the PartChangeListener for the BodyListPanel.
        BodyList.setPartChangeListener(part -> {
            // Set the body as the selected part.
            changeBody((amalgamation.parts.Body)part);
        });
        BodyPanel.setLayout(new java.awt.GridLayout());

        NameLabel.setFont(new java.awt.Font("Berlin Sans FB", 1, 14)); // NOI18N
        NameLabel.setForeground(new java.awt.Color(51, 153, 255));
        NameLabel.setText("Name:");

        NameField.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 14)); // NOI18N
        NameField.setForeground(new java.awt.Color(255, 0, 0));

        DisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        DisplayPanel.add(new DisplayPanel());
        DisplayPanel.setLayout(new java.awt.GridLayout());

        javax.swing.GroupLayout NamePanelLayout = new javax.swing.GroupLayout(NamePanel);
        NamePanel.setLayout(NamePanelLayout);
        NamePanelLayout.setHorizontalGroup(
            NamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NamePanelLayout.createSequentialGroup()
                .addComponent(NameLabel)
                .addGap(0, 366, Short.MAX_VALUE))
            .addComponent(DisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(NameField)
        );
        NamePanelLayout.setVerticalGroup(
            NamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NamePanelLayout.createSequentialGroup()
                .addComponent(NameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(DisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        PartsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Parts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB Demi", 1, 14), new java.awt.Color(51, 153, 255))); // NOI18N
        PartsPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jButton1.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Finish");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InstructionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(NamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PartsPane)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InstructionsLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PartsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        javax.swing.SwingUtilities.invokeLater(this::save);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AmalgamationCreatorDialog dialog = new AmalgamationCreatorDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JPanel DisplayPanel;
    private javax.swing.JLabel InstructionsLabel;
    private javax.swing.JTextField NameField;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JPanel NamePanel;
    private javax.swing.JTabbedPane PartsPane;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    // <editor-fold desc="Display Panel" defaultstate="collapsed">
    // The panel that displays the Body's image.
    private class DisplayPanel extends javax.swing.JPanel {
        @Override
        protected void paintComponent(java.awt.Graphics g){
            super.paintComponent(g);
            
            // Draw the Body's full image.
            if (body != null)
                g.drawImage(body.fullImage(), 0, 0, getWidth(), getHeight(), 
                        this);
        }
    }
    // </editor-fold>

    // Sets the body and updates the PartsPane.
    private void changeBody(amalgamation.parts.Body body) {
        this.body = body;
        
        // Remove all the tabs in the PartsPane.
        for (int i = PartsPane.getTabCount() - 1; i >= 0; i--)
            PartsPane.removeTabAt(i);
        
        // Set up the new tabs for the PartListPanels.
        for (int i = 0; i < body.getArmSlots().length; i++) {
            // Create a new tab containing the PartListPanel.
            amalgamation.parts.PartListPanel panel 
                    = new amalgamation.parts.PartListPanel(
                            amalgamation.parts.Parts.TYPE_ARM,
                            (int)body.getArmSlots()[i].getRotationDegrees());
            PartsPane.addTab("Arm " + (i + 1), panel);
            
            // Set the PartChooseListener for the panel.
            final int index = i;
            panel.setPartChangeListener(part -> {
                // Set the specific slot to the chosen Part.
                body.getArmSlots()[index].setPart((amalgamation.parts.Arm)part);
                repaint();
            });
            
            // Set the rotation slider's listener for the panel.
            panel.setSliderListener(rotation -> {
                // Change the rotation for the specific slot.
                body.getArmSlots()[index].setRotationDegrees((double)rotation);
                repaint();
            });
        }
        
        // Set up the new tabs for the PartListPanels.
        for (int i = 0; i < body.getHeadSlots().length; i++) {
            // Create a new tab containing the PartListPanel.
            amalgamation.parts.PartListPanel panel 
                    = new amalgamation.parts.PartListPanel(
                            amalgamation.parts.Parts.TYPE_HEAD,
                            (int)body.getHeadSlots()[i].getRotationDegrees());
            PartsPane.addTab("Head " + (i + 1), panel);
            
            // Set the PartChooseListener for the panel.
            final int index = i;
            panel.setPartChangeListener(part -> {
                // Set the specific slot to the chosen Part.
                body.getHeadSlots()[index].setPart(
                        (amalgamation.parts.Head)part);
                repaint();
            });
            
            // Set the rotation slider's listener for the panel.
            panel.setSliderListener(rotation -> {
                // Change the rotation for the specific slot.
                body.getHeadSlots()[index].setRotationDegrees((double)rotation);
                repaint();
            });
        }
        
        // Set up the new tabs for the PartListPanels.
        for (int i = 0; i < body.getLegSlots().length; i++) {
            // Create a new tab containing the PartListPanel.
            amalgamation.parts.PartListPanel panel 
                    = new amalgamation.parts.PartListPanel(
                            amalgamation.parts.Parts.TYPE_LEG,
                            (int)body.getLegSlots()[i].getRotationDegrees());
            PartsPane.addTab("Leg " + (i + 1), panel);
            
            // Set the PartChooseListener for the panel.
            final int index = i;
            panel.setPartChangeListener(part -> {
                // Set the specific slot to the chosen Part.
                body.getLegSlots()[index].setPart((amalgamation.parts.Leg)part);
                repaint();
            });
            
            // Set the rotation slider's listener for the panel.
            panel.setSliderListener(rotation -> {
                // Change the rotation for the specific slot.
                body.getLegSlots()[index].setRotationDegrees((double)rotation);
                repaint();
            });
        }
        
        repaint();
    }
    
    /**
     * Displays a Dialog that allows the user to design and save their own
     * Amalgamation.
     * 
     * Calling this method will set up an AmalgamationCreatorDialog and cease
     * control to it until the user has either finished their creation or closed
     * the dialog.
     * 
     * The dialog will take care of the entire creation process. There is no
     * need for the caller to do anything besides call this method.
     * 
     * @param parent the JFrame this Dialog should be the child of. This JFrame
     *               will be unable to receive any input until the Dialog is
     *               closed.
     */
    public static void create(javax.swing.JFrame parent) {
        new AmalgamationCreatorDialog(parent).setVisible(true);
    }
    
    // Attmepts to save the creation.
    private void save() {
        // Check if the creation is complete.
        if (verifyCreation()) {
            // Save the creation to a file.
            Amalgamations.save(body, NameField.getText());
            // Close the dialog.
            setVisible(false);
        }
       
    }
    
    // Returns true if the Amalgamation is complete.
    private boolean verifyCreation() {
        // Check the Body.
        if (body == null) {
            // Display an error message.
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "You haven't created anything yet!\n\n"
                            + "Choose a body type to get started."
            );
            return false;
        }
        // Check all of the Arm slots.
        for (amalgamation.parts.Slot s : body.getArmSlots())
            // Check if the slot is empty.
            if (s.getPart() == null) {
                // Display an error message.
                javax.swing.JOptionPane.showMessageDialog(
                        this, 
                        "Your creation looks like it's missing an Arm!"
                );
                return false;
            }
        
        // Check all of the Head slots.
        for (amalgamation.parts.Slot s : body.getHeadSlots())
            // Check if the slot is empty.
            if (s.getPart() == null) {
                // Display an error message.
                javax.swing.JOptionPane.showMessageDialog(
                        this, 
                        "Your creation looks like it's missing a Head!"
                );
                return false;
            }
        
        // Check all of the Leg slots.
        for (amalgamation.parts.Slot s : body.getLegSlots())
            // Check if the slot is empty.
            if (s.getPart() == null) {
                // Display an error message.
                javax.swing.JOptionPane.showMessageDialog(
                        this, 
                        "Your creation looks like it's missing a Leg!"
                );
                return false;
            }
        
        // Check the name.
        if ("".equals(NameField.getText()))
            // Display an error message.
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Your creation may want a name!"
            );
        
        return true;
    }

}
