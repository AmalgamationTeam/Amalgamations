package amalgamation.abilities;

/**
 * A tool to create and edit Abilities and manage all of the stored Ability
 * resources.
 * 
 * @author Caleb Rush
 */
public class AbilityEditor extends javax.swing.JFrame {
    // <editor-fold desc="Instance Variables" defaultstate="collapsed">
    
    // </editor-fold>
    
    // <editor-fold desc="Constructor" defaultstate="collapsed">
    /**
     * Creates new form AbilityEditor
     */
    public AbilityEditor() {
        initComponents();
        initTable();
        updateAbilityList();
        disableFields();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
    // </editor-fold>
    
    // <editor-fold desc="Event Handlers" defaultstate="collapsed" >
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AbilityListPanel = new javax.swing.JPanel();
        AbilityListScrollPane = new javax.swing.JScrollPane();
        AbilityList = new javax.swing.JList();
        AbilityListLabel = new javax.swing.JLabel();
        EditPanel = new javax.swing.JPanel();
        NamePanel = new javax.swing.JPanel();
        NameLabel = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        CooldownPanel = new javax.swing.JPanel();
        CooldownLabel = new javax.swing.JLabel();
        CooldownField = new javax.swing.JTextField();
        AccuracyPanel = new javax.swing.JPanel();
        AccuracyLabel = new javax.swing.JLabel();
        AccuracyField = new javax.swing.JTextField();
        PowerPanel = new javax.swing.JPanel();
        PowerLabel = new javax.swing.JLabel();
        PowerField = new javax.swing.JTextField();
        ModifierTableScrollPane = new javax.swing.JScrollPane();
        ModifierTable = new javax.swing.JTable();
        AddModifierButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        ModifierLabel = new javax.swing.JLabel();
        LevelPanel = new javax.swing.JPanel();
        LevelLabel = new javax.swing.JLabel();
        LevelField = new javax.swing.JTextField();
        NewButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AbilityList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AbilityListKeyPressed(evt);
            }
        });
        AbilityList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                AbilityListValueChanged(evt);
            }
        });
        AbilityListScrollPane.setViewportView(AbilityList);

        AbilityListLabel.setText("Abilities:");

        javax.swing.GroupLayout AbilityListPanelLayout = new javax.swing.GroupLayout(AbilityListPanel);
        AbilityListPanel.setLayout(AbilityListPanelLayout);
        AbilityListPanelLayout.setHorizontalGroup(
            AbilityListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AbilityListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(AbilityListPanelLayout.createSequentialGroup()
                .addComponent(AbilityListLabel)
                .addGap(0, 116, Short.MAX_VALUE))
        );
        AbilityListPanelLayout.setVerticalGroup(
            AbilityListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AbilityListPanelLayout.createSequentialGroup()
                .addComponent(AbilityListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AbilityListScrollPane))
        );

        EditPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NameLabel.setText("Name:");

        NameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NamePanelLayout = new javax.swing.GroupLayout(NamePanel);
        NamePanel.setLayout(NamePanelLayout);
        NamePanelLayout.setHorizontalGroup(
            NamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NamePanelLayout.createSequentialGroup()
                .addComponent(NameLabel)
                .addGap(0, 66, Short.MAX_VALUE))
            .addComponent(NameField)
        );
        NamePanelLayout.setVerticalGroup(
            NamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NamePanelLayout.createSequentialGroup()
                .addComponent(NameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        CooldownLabel.setText("Cooldown:");

        CooldownField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CooldownFieldFocusGained(evt);
            }
        });
        CooldownField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CooldownFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CooldownPanelLayout = new javax.swing.GroupLayout(CooldownPanel);
        CooldownPanel.setLayout(CooldownPanelLayout);
        CooldownPanelLayout.setHorizontalGroup(
            CooldownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CooldownLabel)
            .addComponent(CooldownField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        CooldownPanelLayout.setVerticalGroup(
            CooldownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CooldownPanelLayout.createSequentialGroup()
                .addComponent(CooldownLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CooldownField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        AccuracyLabel.setText("Accuracy:");

        AccuracyField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AccuracyFieldFocusGained(evt);
            }
        });
        AccuracyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccuracyFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AccuracyPanelLayout = new javax.swing.GroupLayout(AccuracyPanel);
        AccuracyPanel.setLayout(AccuracyPanelLayout);
        AccuracyPanelLayout.setHorizontalGroup(
            AccuracyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AccuracyLabel)
            .addComponent(AccuracyField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        AccuracyPanelLayout.setVerticalGroup(
            AccuracyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccuracyPanelLayout.createSequentialGroup()
                .addComponent(AccuracyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccuracyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        PowerLabel.setText("Power:");

        PowerField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PowerFieldFocusGained(evt);
            }
        });
        PowerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PowerFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PowerPanelLayout = new javax.swing.GroupLayout(PowerPanel);
        PowerPanel.setLayout(PowerPanelLayout);
        PowerPanelLayout.setHorizontalGroup(
            PowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PowerPanelLayout.createSequentialGroup()
                .addGroup(PowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PowerLabel)
                    .addComponent(PowerField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        PowerPanelLayout.setVerticalGroup(
            PowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PowerPanelLayout.createSequentialGroup()
                .addComponent(PowerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PowerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        ModifierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stat", "Multiplier", "Adder", "Script"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ModifierTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ModifierTableKeyPressed(evt);
            }
        });
        ModifierTableScrollPane.setViewportView(ModifierTable);
        if (ModifierTable.getColumnModel().getColumnCount() > 0) {
            ModifierTable.getColumnModel().getColumn(0).setMinWidth(100);
            ModifierTable.getColumnModel().getColumn(0).setPreferredWidth(100);
            ModifierTable.getColumnModel().getColumn(0).setMaxWidth(100);
            ModifierTable.getColumnModel().getColumn(1).setMinWidth(60);
            ModifierTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            ModifierTable.getColumnModel().getColumn(1).setMaxWidth(60);
            ModifierTable.getColumnModel().getColumn(2).setMinWidth(60);
            ModifierTable.getColumnModel().getColumn(2).setPreferredWidth(60);
            ModifierTable.getColumnModel().getColumn(2).setMaxWidth(60);
        }

        AddModifierButton.setText("Add Modifier");
        AddModifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddModifierButtonActionPerformed(evt);
            }
        });

        SaveButton.setText("Save Ability");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        ModifierLabel.setText("Modifiers:");

        LevelLabel.setText("Level:");

        LevelField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                LevelFieldFocusGained(evt);
            }
        });
        LevelField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LevelFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LevelPanelLayout = new javax.swing.GroupLayout(LevelPanel);
        LevelPanel.setLayout(LevelPanelLayout);
        LevelPanelLayout.setHorizontalGroup(
            LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LevelPanelLayout.createSequentialGroup()
                .addGroup(LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LevelLabel)
                    .addComponent(LevelField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        LevelPanelLayout.setVerticalGroup(
            LevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LevelPanelLayout.createSequentialGroup()
                .addComponent(LevelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LevelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout EditPanelLayout = new javax.swing.GroupLayout(EditPanel);
        EditPanel.setLayout(EditPanelLayout);
        EditPanelLayout.setHorizontalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddModifierButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(EditPanelLayout.createSequentialGroup()
                        .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditPanelLayout.createSequentialGroup()
                                .addComponent(ModifierLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(EditPanelLayout.createSequentialGroup()
                                .addComponent(NamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CooldownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AccuracyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveButton))
                    .addComponent(ModifierTableScrollPane))
                .addContainerGap())
        );
        EditPanelLayout.setVerticalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CooldownPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AccuracyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SaveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LevelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ModifierLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ModifierTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddModifierButton)
                .addContainerGap())
        );

        NewButton.setText("New Ability");
        NewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AbilityListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AbilityListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NewButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AccuracyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccuracyFieldActionPerformed
        javax.swing.SwingUtilities.invokeLater(SaveButton::doClick);
    }//GEN-LAST:event_AccuracyFieldActionPerformed

    private void AddModifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddModifierButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(this::addModifier);
    }//GEN-LAST:event_AddModifierButtonActionPerformed

    private void ModifierTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ModifierTableKeyPressed
        javax.swing.SwingUtilities.invokeLater(this::deleteModifier);
    }//GEN-LAST:event_ModifierTableKeyPressed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (checkValidity())
                saveAbility();
        });
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void NewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(this::add);
    }//GEN-LAST:event_NewButtonActionPerformed

    private void AbilityListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_AbilityListValueChanged
        javax.swing.SwingUtilities.invokeLater(this::load);
    }//GEN-LAST:event_AbilityListValueChanged

    private void AbilityListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AbilityListKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed.
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE)
                delete();
        });
    }//GEN-LAST:event_AbilityListKeyPressed

    private void CooldownFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CooldownFieldActionPerformed
        javax.swing.SwingUtilities.invokeLater(SaveButton::doClick);
    }//GEN-LAST:event_CooldownFieldActionPerformed

    private void NameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameFieldActionPerformed
        javax.swing.SwingUtilities.invokeLater(SaveButton::doClick);
    }//GEN-LAST:event_NameFieldActionPerformed

    private void PowerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PowerFieldActionPerformed
        javax.swing.SwingUtilities.invokeLater(SaveButton::doClick);
    }//GEN-LAST:event_PowerFieldActionPerformed

    private void CooldownFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CooldownFieldFocusGained
        javax.swing.SwingUtilities.invokeLater(CooldownField::selectAll);
    }//GEN-LAST:event_CooldownFieldFocusGained

    private void AccuracyFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AccuracyFieldFocusGained
        javax.swing.SwingUtilities.invokeLater(AccuracyField::selectAll);
    }//GEN-LAST:event_AccuracyFieldFocusGained

    private void PowerFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PowerFieldFocusGained
        javax.swing.SwingUtilities.invokeLater(PowerField::selectAll);
    }//GEN-LAST:event_PowerFieldFocusGained

    private void LevelFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LevelFieldActionPerformed
        javax.swing.SwingUtilities.invokeLater(SaveButton::doClick);
    }//GEN-LAST:event_LevelFieldActionPerformed

    private void LevelFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LevelFieldFocusGained
        javax.swing.SwingUtilities.invokeLater(LevelField::selectAll);
    }//GEN-LAST:event_LevelFieldFocusGained
    // </editor-fold>
    
    // <editor-fold desc="Main" defaultstate="collapsed" >
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbilityEditor().setVisible(true);
            }
        });
    }
    // </editor-fold>

    // <editor-fold desc="GUI Elements" defaultstate="collapsed">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList AbilityList;
    private javax.swing.JLabel AbilityListLabel;
    private javax.swing.JPanel AbilityListPanel;
    private javax.swing.JScrollPane AbilityListScrollPane;
    private javax.swing.JTextField AccuracyField;
    private javax.swing.JLabel AccuracyLabel;
    private javax.swing.JPanel AccuracyPanel;
    private javax.swing.JButton AddModifierButton;
    private javax.swing.JTextField CooldownField;
    private javax.swing.JLabel CooldownLabel;
    private javax.swing.JPanel CooldownPanel;
    private javax.swing.JPanel EditPanel;
    private javax.swing.JTextField LevelField;
    private javax.swing.JLabel LevelLabel;
    private javax.swing.JPanel LevelPanel;
    private javax.swing.JLabel ModifierLabel;
    private javax.swing.JTable ModifierTable;
    private javax.swing.JScrollPane ModifierTableScrollPane;
    private javax.swing.JTextField NameField;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JPanel NamePanel;
    private javax.swing.JButton NewButton;
    private javax.swing.JTextField PowerField;
    private javax.swing.JLabel PowerLabel;
    private javax.swing.JPanel PowerPanel;
    private javax.swing.JButton SaveButton;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // <editor-fold desc="Methods" defaultstate="collapsed" >
    // Activates the fields to prepare to create a new Ability.
    private void add() {
        disableFields();
        enableFields();
    }
    
    // Adds a new row to the Modifier table.
    private void addModifier() {
        // Create a new row in the table.
        ((javax.swing.table.DefaultTableModel)ModifierTable.getModel()).addRow(
                new Object[] { "User Health", 1.0, 0, "" } );
    }
    
    // Checks if all input fields have valid values.
    private boolean checkValidity() {
        // Check Name.
        if ("".equals(NameField.getText())) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "You must enter a Name.",
                    "No Name",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
            return false;
        }
        // Check CooldownField.
        try {
            if (Integer.parseInt(CooldownField.getText()) < 0)
                throw new NumberFormatException();
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "The Cooldown must be a positive integer.",
                    "Invalid Cooldown",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
            return false;
        }
        // Check Accuracy field.
        try {
            int accuracy = Integer.parseInt(AccuracyField.getText());
            if (accuracy < 0 || accuracy > 100) 
                throw new NumberFormatException();
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "The Accuracy must be an integer between 0 and 100.",
                    "Invalid Accuracy",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
            return false;
        }
        // Check Level field.
        try {
            int level = Integer.parseInt(LevelField.getText());
            if (level < 0 || level > amalgamation.Amalgamation.MAX_LEVEL)
                throw new NumberFormatException();
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "The Level must be an integer between 0 and " 
                            + amalgamation.Amalgamation.MAX_LEVEL + ".",
                    "Invalid Level",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
            return false;
        }
        // Check Power field.
        if (!"".equals(PowerField.getText())) {
            try {
                if (Integer.parseInt(PowerField.getText()) < 0)
                throw new NumberFormatException();
            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "The Power must be a positive integer.",
                        "Invalid Power",
                        javax.swing.JOptionPane.ERROR_MESSAGE
                );
                return false;
            }
        }
        
        return true;
    }
    
    
    // Deletes the currently selected Ability after confirming with the user.
    private void delete() {
        // Check if an Ability is selected.
        if (AbilityList.getSelectedIndex() != -1) 
            // Ensure the user wants to delete the Ability.
            if (javax.swing.JOptionPane.showConfirmDialog(this, 
                    "Are you sure you would like to delete " 
                            + AbilityList.getSelectedValue().toString() + "?")
                    == javax.swing.JOptionPane.YES_OPTION) {
                // Delete the Ability.
                Abilities.delete(AbilityList.getSelectedValue().toString());
                // Update the list of Abilities.
                updateAbilityList();
            }
        
    }
    
    // Deletes the currently selected row in the Modifier table.
    private void deleteModifier() {
        // Delete all of the selected rows.
        int[] rows = ModifierTable.getSelectedRows();
        
        for (int c = 0; c < rows.length; c++) {
            ((javax.swing.table.DefaultTableModel)ModifierTable.getModel())
                    .removeRow(rows[0]);
        }
    }
    
    // Disables and clears all input fields.
    private void disableFields() {
        NameField.setEnabled(false);
        NameField.setText("");
        CooldownField.setEnabled(false);
        CooldownField.setText("");
        AccuracyField.setEnabled(false);
        AccuracyField.setText("");
        LevelField.setEnabled(false);
        LevelField.setText("");
        PowerField.setEnabled(false);
        PowerField.setText("");
        SaveButton.setEnabled(false);
        AddModifierButton.setEnabled(false);
        ((javax.swing.table.DefaultTableModel)ModifierTable.getModel())
                .setNumRows(0);
    }
    
    // Enables all input fields.
    private void enableFields() {
        NameField.setEnabled(true);
        CooldownField.setEnabled(true);
        AccuracyField.setEnabled(true);
        LevelField.setEnabled(true);
        PowerField.setEnabled(true);
        SaveButton.setEnabled(true);
        AddModifierButton.setEnabled(true);
    }
    
    // Retrieves all of the Modifiers from the table.
    private StatModifier[] getModifiers() {
        StatModifier[] modifiers 
                = new StatModifier[ModifierTable.getRowCount()];
        
        // Iterate through the table.
        for (int r = 0; r < modifiers.length; r++) {
            // Determine the type of the modifier.
            int type = 0;
            switch(ModifierTable.getValueAt(r, 0).toString()) {
                case "User Health":
                    type = StatModifier.MODIFIER_USER_HEALTH;
                    break;
                case "User Attack":
                    type = StatModifier.MODIFIER_USER_ATTACK;
                    break;
                case "User Defense":
                    type = StatModifier.MODIFIER_USER_DEFENSE;
                    break;
                case "User Speed":
                    type = StatModifier.MODIFIER_USER_SPEED;
                    break;
                case "Target Attack":
                    type = StatModifier.MODIFIER_OPPONENT_ATTACK;
                    break;
                case "Target Defense":
                    type = StatModifier.MODIFIER_OPPONENT_DEFENSE;
                    break;
                case "Target Speed":
                    type = StatModifier.MODIFIER_OPPONENT_SPEED;
            }
            
            // Create a modifier from the table row.
            modifiers[r] = new StatModifier(
                    (int)ModifierTable.getValueAt(r, 2),
                    (double)ModifierTable.getValueAt(r, 1),
                    type,
                    ModifierTable.getValueAt(r, 3).toString()
            );
        }
        
        return modifiers;
    }
    
    private void initTable() {
        ModifierTable.getColumnModel().getColumn(0).setCellEditor(
                new javax.swing.DefaultCellEditor(
                    new javax.swing.JComboBox<>( new String[] {
                        "User Health",
                        "User Attack",
                        "User Defense",
                        "User Speed",
                        "Target Attack",
                        "Target Defense",
                        "Target Speed"
                    } )
                ));
    }
    
    // Loads the currently selected ability.
    private void load() {
        // Disable fields.
        disableFields();
        
        // Check if a value is selected.
        if (AbilityList.getSelectedIndex() == -1)
            return;
        
        // Load the ability.
        Ability ability 
                = Abilities.load(AbilityList.getSelectedValue().toString());
        
        // Load the ability's fields into the input field.
        NameField.setText(ability.getName());
        CooldownField.setText("" + ability.getCooldown());
        AccuracyField.setText("" + ability.getAccuracy());
        LevelField.setText("" + ability.getLevel());
        if (ability instanceof Attack)
            PowerField.setText("" + ((Attack)ability).getDamage());
        else
            PowerField.setText("");
        
        // Load the modifiers into the table.
        for (StatModifier m : ability.getModifiers()) {
            ((javax.swing.table.DefaultTableModel)ModifierTable.getModel())
                    .addRow(new Object[] {
                        m.getModifiedStat(),
                        m.getMultiplier(),
                        m.getAdder(),
                        m.getScript()
                    });
            //System.out.println( m.getScript("Joe", "Sandy"));
        }
        
        // Enable the fields.
        enableFields();
    }
    
    // Creates and saves the Ability to the file with the information from the 
    // input fields.
    private void saveAbility() {
        // Check if the Ability is an Attack or not.
        if ("".equals(PowerField.getText()))
            Abilities.save(Abilities.TYPE_ABILITY,
                    NameField.getText(),
                    Integer.parseInt(CooldownField.getText()),
                    Integer.parseInt(AccuracyField.getText()),
                    Integer.parseInt(LevelField.getText()),
                    0,
                    getModifiers()
            );
        else
            Abilities.save(Abilities.TYPE_ATTACK,
                    NameField.getText(),
                    Integer.parseInt(CooldownField.getText()),
                    Integer.parseInt(AccuracyField.getText()),
                    Integer.parseInt(LevelField.getText()),
                    Integer.parseInt(PowerField.getText()),
                    getModifiers()
            );
        
        // Inform the user that the save was successful.
        javax.swing.JOptionPane.showMessageDialog(
                this,
                "Ability was successfully saved.",
                "Save successful.",
                javax.swing.JOptionPane.INFORMATION_MESSAGE
        );
        
        // Update the AbilityList.
        updateAbilityList();
    }
    
    private void updateAbilityList() {
        // Set the model for the AbilityList.
        AbilityList.setListData(Abilities.getAbilityNames());
    }
    // </editor-fold>
}
