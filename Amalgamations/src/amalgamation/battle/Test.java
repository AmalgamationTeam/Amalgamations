package amalgamation.battle;

import amalgamation.Amalgamation;
import menus.components.AbilityPanel;
import menus.components.AmalgamationPanel;

/**
 * A Test for the Battle package.
 * 
 * @author Caleb Rush
 */
public class Test extends javax.swing.JFrame implements Controller {
    // The move that is currently selected.
    private int moveSelected;

    // <editor-fold desc="GUI Code" defaultstate="collapsed">
    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ScriptList = new javax.swing.JList<String>();
        AbilPanel1 = new menus.components.AbilityPanel();
        AbilPanel2 = new menus.components.AbilityPanel();
        AbilPanel3 = new menus.components.AbilityPanel();
        PlayerPanel = new menus.components.AmalgamationPanel();
        AbilPanel4 = new menus.components.AbilityPanel();
        OpponentPanel = new menus.components.AmalgamationPanel();
        PlayerHealthLabel = new javax.swing.JLabel();
        OpponentHealthLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(ScriptList);

        AbilPanel1.setClickAction(() -> moveSelected = 0);

        AbilPanel2.setClickAction(() -> moveSelected = 1);

        AbilPanel3.setClickAction(() -> moveSelected = 2);

        javax.swing.GroupLayout PlayerPanelLayout = new javax.swing.GroupLayout(PlayerPanel);
        PlayerPanel.setLayout(PlayerPanelLayout);
        PlayerPanelLayout.setHorizontalGroup(
            PlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PlayerPanelLayout.setVerticalGroup(
            PlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        AbilPanel4.setClickAction(() -> moveSelected = 3);

        javax.swing.GroupLayout OpponentPanelLayout = new javax.swing.GroupLayout(OpponentPanel);
        OpponentPanel.setLayout(OpponentPanelLayout);
        OpponentPanelLayout.setHorizontalGroup(
            OpponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        OpponentPanelLayout.setVerticalGroup(
            OpponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        PlayerHealthLabel.setText("Health: ");

        OpponentHealthLabel.setText("Health:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AbilPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AbilPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AbilPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AbilPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PlayerHealthLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OpponentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(OpponentHealthLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OpponentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OpponentHealthLabel)
                            .addComponent(PlayerHealthLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AbilPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AbilPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AbilPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AbilPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Test test = new Test();
                test.setVisible(true);
                Battle battle = new Battle(
                        util.Amalgamations.load("Horsey"),
                        util.Amalgamations.load("Horsey"),
                        test, new AIController()
                );
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private menus.components.AbilityPanel AbilPanel1;
    private menus.components.AbilityPanel AbilPanel2;
    private menus.components.AbilityPanel AbilPanel3;
    private menus.components.AbilityPanel AbilPanel4;
    private javax.swing.JLabel OpponentHealthLabel;
    private menus.components.AmalgamationPanel OpponentPanel;
    private javax.swing.JLabel PlayerHealthLabel;
    private menus.components.AmalgamationPanel PlayerPanel;
    private javax.swing.JList<String> ScriptList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>

    @Override
    public void startBattle(Amalgamation player, Amalgamation opponent) {
        // Display the Amalgamations in their panels.
        PlayerPanel.setAmalgamation(player);
        OpponentPanel.setAmalgamation(opponent);
        // Display the player's Abilities in their panels.
        AbilPanel1.setAbility(player.getAbilities()[0]);
        AbilPanel2.setAbility(player.getAbilities()[1]);
        AbilPanel3.setAbility(player.getAbilities()[2]);
        AbilPanel4.setAbility(player.getAbilities()[3]);
        pack();
        setLocationRelativeTo(null);
        repaint();
    }
    
    @Override
    public int chooseMove(Amalgamation player, Amalgamation opponent,
            String[] script) {
        // Update the script.
        ScriptList.setListData(script);
        
        // Set the Amalgamations' Health Labels.
        PlayerHealthLabel.setText("Health: " + player.getCurrentHealth());
        OpponentHealthLabel.setText("Health: " + opponent.getCurrentHealth());
        
        // Update the AbilPanels.
        AbilPanel1.updateView();
        AbilPanel2.updateView();
        AbilPanel3.updateView();
        AbilPanel4.updateView();
        
        repaint();
        
        // Wait for a panel to be clicked.
        moveSelected = 4;
        while (moveSelected == 4)
        {
            try {
                Thread.sleep(100);
            } catch (Exception e) { e.printStackTrace(); }
        }
        
        return moveSelected;
    }
    
    @Override
    public void endBattle(Amalgamation player, Amalgamation opponent, 
            String[] script) {
        ScriptList.setListData(script);
        // Update the AbilPanels.
        AbilPanel1.updateView();
        AbilPanel2.updateView();
        AbilPanel3.updateView();
        AbilPanel4.updateView();
        repaint();
    }
    
}
