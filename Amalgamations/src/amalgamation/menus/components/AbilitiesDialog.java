package amalgamation.menus.components;

import util.Abilities;

/**
 * A dialog for selecting an array of Abilities from the full list of Abilities.
 * 
 * @author Caleb Rush
 */
public class AbilitiesDialog extends javax.swing.JDialog {
    // The array of Abilities to return.
    private String[] abilities;
    
    /**
     * Creates new form AbilitiesDialog
     */
    private AbilitiesDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        // Center dialog in parent.
        setLocationRelativeTo(parent);
        // Set up the list of Abilities.
        AbilityList.setListData(Abilities.getAbilityNames());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InstructionsLabel = new javax.swing.JLabel();
        AbilityListScrollPane = new javax.swing.JScrollPane();
        AbilityList = new javax.swing.JList<String>();
        CancelButton = new javax.swing.JButton();
        SelectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        InstructionsLabel.setText("Select Abilities (hold CTRL to select multiple)");

        AbilityList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                AbilityListValueChanged(evt);
            }
        });
        AbilityListScrollPane.setViewportView(AbilityList);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        SelectButton.setText("Select");
        SelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AbilityListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(InstructionsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SelectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InstructionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AbilityListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelButton)
                    .addComponent(SelectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(this::cancel);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void SelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(this::select);
    }//GEN-LAST:event_SelectButtonActionPerformed

    private void AbilityListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_AbilityListValueChanged
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if no indices are selected.
            if (AbilityList.getSelectedValue() == null)
                // Disable the select button.
                SelectButton.setEnabled(false);
            else
                // Enable the select button.
                SelectButton.setEnabled(true);
        });
    }//GEN-LAST:event_AbilityListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AbilityList;
    private javax.swing.JScrollPane AbilityListScrollPane;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel InstructionsLabel;
    private javax.swing.JButton SelectButton;
    // End of variables declaration//GEN-END:variables

    // Cancels the dialog, returning null.
    private void cancel() {
        // Ensure the returned value is null so the caller knows the user
        // cancellled.
        abilities = null;
        // Hide the dialog and give control back to the calling method.
        setVisible(false);
    }
    
    // Confirms the selection choice and returns control back to caller.
    private void select() {
        // Retrieve the selected values in the list.
        abilities = AbilityList.getSelectedValuesList().toArray(new String[0]);
        // Hide the dialog and give control back to the calling method.
        setVisible(false);
    }
    
    /**
     * Creates a dialog that allows the user to select a list of Abilities
     * from the full list of all Abilities.
     * 
     * Note that this method returns only the names of the selected Abilities.
     * In order to get the actual Abilities, call the load method from the
     * amalgamation.abilities.Abilities class and pass the name of the 
     * Ability you wish to load.
     * 
     * @param parent the parent of the dialog. Can be null.
     * @return an array of names for the selected Abilities.
     */
    public static String[] showAbilitiesDialog(javax.swing.JFrame parent) {
        // Create a new dialog.
        AbilitiesDialog dialog = new AbilitiesDialog(parent);
        
        // Make the dialog visible and cease control until a selection is made.
        dialog.setVisible(true);
        
        return dialog.abilities;
    }
}
