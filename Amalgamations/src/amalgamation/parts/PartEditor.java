package amalgamation.parts;

import java.awt.GraphicsConfiguration;

/**
 *
 * @author Caleb Rush
 */
public class PartEditor extends javax.swing.JFrame {
    // <editor-fold desc="Instance Variables" defaultstate="collapsed"> 
    // Size of the crosshair.
    private final static int CROSSHAIR_SIZE = 10;
    // Radius of the slot.
    private final static int SLOT_RADIUS = 5;
    // The image to draw on the Body Part image panel.
    private java.awt.Image image;
    // The file containing the image.
    private java.io.File imageFile;
    // The coordinates to draw the crosshairs on the image.
    private int crossX;
    private int crossY;
    // The coordinates to draw the current slot on the image.
    private int[] slot;
    // Whether or not to draw the crosshairs.
    private boolean drawCrosshairs = false;
    // Whether or not to move the crosshairs.
    private boolean pivotSet = false;
    // The ImagePanel that paints the image.
    private final ImagePanel imagePanel = new ImagePanel();
    // </editor-fold>

    // <editor-fold desc="Constructor" defaultstate="collapsed">
    /**
     * Creates new form PartEditor
     */
    public PartEditor() {
        initComponents();
        // Exit on close.
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        // Add a new image panel to the PartDisplayPanel.
        PartDisplayPanel.add(imagePanel);   
        // Make the ImagePanel transparent.
        imagePanel.setOpaque(false);
        // Retrieve the lists of Parts.
        updateFileLists();
        // Disable all the fields.
        disableFields();
        // Initialize the table.
        initTable();
        // Center window on screen.
        setLocationRelativeTo(null);
    }
    // </editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PartTypePane = new javax.swing.JTabbedPane();
        ArmsPanel = new javax.swing.JPanel();
        ArmsScrollPane = new javax.swing.JScrollPane();
        ArmsList = new javax.swing.JList<String>();
        BodiesPanel = new javax.swing.JPanel();
        BodiesScrollPane = new javax.swing.JScrollPane();
        BodiesList = new javax.swing.JList<String>();
        HeadsPanel = new javax.swing.JPanel();
        HeadsScrollPane = new javax.swing.JScrollPane();
        HeadsList = new javax.swing.JList<String>();
        LegsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LegsList = new javax.swing.JList<String>();
        EditPanel = new javax.swing.JPanel();
        PartDisplayPanel = new javax.swing.JPanel();
        PartNamePanel = new javax.swing.JPanel();
        PartNameLabel = new javax.swing.JLabel();
        PartNameField = new javax.swing.JTextField();
        PartImagePanel = new javax.swing.JPanel();
        PartImageLabel = new javax.swing.JLabel();
        PartImageField = new javax.swing.JTextField();
        PartImageButton = new javax.swing.JButton();
        PartPivotPanel = new javax.swing.JPanel();
        PartPivotLabel = new javax.swing.JLabel();
        PartPivotXLabel = new javax.swing.JLabel();
        PartPivotXField = new javax.swing.JTextField();
        PartPivotYLabel = new javax.swing.JLabel();
        PartPivotYField = new javax.swing.JTextField();
        PartBaseStatPanel = new javax.swing.JPanel();
        PartBaseStatLabel = new javax.swing.JLabel();
        PartBaseHealthLabel = new javax.swing.JLabel();
        PartBaseHealthField = new javax.swing.JTextField();
        PartBaseAttackLabel = new javax.swing.JLabel();
        PartBaseAttackField = new javax.swing.JTextField();
        PartBaseDefenseLabel = new javax.swing.JLabel();
        PartBaseDefenseField = new javax.swing.JTextField();
        PartBaseSpeedLabel = new javax.swing.JLabel();
        PartBaseSpeedField = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        PartTypeCombo = new javax.swing.JComboBox<String>();
        BodySlotPanel = new javax.swing.JPanel();
        BodySlotLabel = new javax.swing.JLabel();
        BodySlotScrollPane = new javax.swing.JScrollPane();
        BodySlotTable = new javax.swing.JTable();
        AddButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ArmsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ArmsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ArmsListKeyPressed(evt);
            }
        });
        ArmsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ArmsListValueChanged(evt);
            }
        });
        ArmsScrollPane.setViewportView(ArmsList);

        javax.swing.GroupLayout ArmsPanelLayout = new javax.swing.GroupLayout(ArmsPanel);
        ArmsPanel.setLayout(ArmsPanelLayout);
        ArmsPanelLayout.setHorizontalGroup(
            ArmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArmsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );
        ArmsPanelLayout.setVerticalGroup(
            ArmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArmsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );

        PartTypePane.addTab("Arms", ArmsPanel);

        BodiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        BodiesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BodiesListKeyPressed(evt);
            }
        });
        BodiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                BodiesListValueChanged(evt);
            }
        });
        BodiesScrollPane.setViewportView(BodiesList);

        javax.swing.GroupLayout BodiesPanelLayout = new javax.swing.GroupLayout(BodiesPanel);
        BodiesPanel.setLayout(BodiesPanelLayout);
        BodiesPanelLayout.setHorizontalGroup(
            BodiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BodiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );
        BodiesPanelLayout.setVerticalGroup(
            BodiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BodiesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );

        PartTypePane.addTab("Bodies", BodiesPanel);

        HeadsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        HeadsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HeadsListKeyPressed(evt);
            }
        });
        HeadsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                HeadsListValueChanged(evt);
            }
        });
        HeadsScrollPane.setViewportView(HeadsList);

        javax.swing.GroupLayout HeadsPanelLayout = new javax.swing.GroupLayout(HeadsPanel);
        HeadsPanel.setLayout(HeadsPanelLayout);
        HeadsPanelLayout.setHorizontalGroup(
            HeadsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeadsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );
        HeadsPanelLayout.setVerticalGroup(
            HeadsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HeadsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );

        PartTypePane.addTab("Heads", HeadsPanel);

        LegsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        LegsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LegsListKeyPressed(evt);
            }
        });
        LegsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LegsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(LegsList);

        javax.swing.GroupLayout LegsPanelLayout = new javax.swing.GroupLayout(LegsPanel);
        LegsPanel.setLayout(LegsPanelLayout);
        LegsPanelLayout.setHorizontalGroup(
            LegsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LegsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );
        LegsPanelLayout.setVerticalGroup(
            LegsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LegsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );

        PartTypePane.addTab("Legs", LegsPanel);

        EditPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        EditPanel.setName(""); // NOI18N

        PartDisplayPanel.setBackground(new java.awt.Color(255, 255, 255));
        PartDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PartDisplayPanel.setPreferredSize(new java.awt.Dimension(350, 350));
        PartDisplayPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                PartDisplayPanelMouseMoved(evt);
            }
        });
        PartDisplayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PartDisplayPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PartDisplayPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PartDisplayPanelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout PartDisplayPanelLayout = new javax.swing.GroupLayout(PartDisplayPanel);
        PartDisplayPanel.setLayout(PartDisplayPanelLayout);
        PartDisplayPanelLayout.setHorizontalGroup(
            PartDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        PartDisplayPanelLayout.setVerticalGroup(
            PartDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        PartNameLabel.setText("Name:");

        javax.swing.GroupLayout PartNamePanelLayout = new javax.swing.GroupLayout(PartNamePanel);
        PartNamePanel.setLayout(PartNamePanelLayout);
        PartNamePanelLayout.setHorizontalGroup(
            PartNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartNamePanelLayout.createSequentialGroup()
                .addComponent(PartNameLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(PartNameField)
        );
        PartNamePanelLayout.setVerticalGroup(
            PartNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartNamePanelLayout.createSequentialGroup()
                .addComponent(PartNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PartNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        PartImageLabel.setText("Image:");

        PartImageField.setEditable(false);

        PartImageButton.setText("Browse");
        PartImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartImageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PartImagePanelLayout = new javax.swing.GroupLayout(PartImagePanel);
        PartImagePanel.setLayout(PartImagePanelLayout);
        PartImagePanelLayout.setHorizontalGroup(
            PartImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartImagePanelLayout.createSequentialGroup()
                .addComponent(PartImageLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(PartImagePanelLayout.createSequentialGroup()
                .addComponent(PartImageField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PartImageButton))
        );
        PartImagePanelLayout.setVerticalGroup(
            PartImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartImagePanelLayout.createSequentialGroup()
                .addComponent(PartImageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartImageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PartImageButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PartPivotLabel.setText("Pivot:");

        PartPivotXLabel.setText("X: ");

        PartPivotXField.setEditable(false);
        PartPivotXField.setColumns(4);
        PartPivotXField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        PartPivotYLabel.setText("Y: ");

        PartPivotYField.setEditable(false);
        PartPivotYField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout PartPivotPanelLayout = new javax.swing.GroupLayout(PartPivotPanel);
        PartPivotPanel.setLayout(PartPivotPanelLayout);
        PartPivotPanelLayout.setHorizontalGroup(
            PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartPivotPanelLayout.createSequentialGroup()
                .addComponent(PartPivotLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PartPivotPanelLayout.createSequentialGroup()
                .addGroup(PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PartPivotYLabel)
                    .addComponent(PartPivotXLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PartPivotXField)
                    .addComponent(PartPivotYField)))
        );
        PartPivotPanelLayout.setVerticalGroup(
            PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartPivotPanelLayout.createSequentialGroup()
                .addComponent(PartPivotLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartPivotXLabel)
                    .addComponent(PartPivotXField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartPivotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartPivotYLabel)
                    .addComponent(PartPivotYField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        PartBaseStatLabel.setText("Base Stats:");

        PartBaseHealthLabel.setText("Health: ");

        PartBaseHealthField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PartBaseHealthField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PartBaseHealthFieldFocusGained(evt);
            }
        });

        PartBaseAttackLabel.setText("Attack: ");

        PartBaseAttackField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PartBaseAttackField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PartBaseAttackFieldFocusGained(evt);
            }
        });

        PartBaseDefenseLabel.setText("Defense:");

        PartBaseDefenseField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PartBaseDefenseField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PartBaseDefenseFieldFocusGained(evt);
            }
        });

        PartBaseSpeedLabel.setText("Speed: ");

        PartBaseSpeedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PartBaseSpeedField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PartBaseSpeedFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout PartBaseStatPanelLayout = new javax.swing.GroupLayout(PartBaseStatPanel);
        PartBaseStatPanel.setLayout(PartBaseStatPanelLayout);
        PartBaseStatPanelLayout.setHorizontalGroup(
            PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartBaseStatPanelLayout.createSequentialGroup()
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PartBaseDefenseLabel)
                    .addComponent(PartBaseSpeedLabel)
                    .addComponent(PartBaseAttackLabel)
                    .addComponent(PartBaseHealthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(PartBaseHealthField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(PartBaseDefenseField)
                    .addComponent(PartBaseAttackField)
                    .addComponent(PartBaseSpeedField, javax.swing.GroupLayout.Alignment.LEADING)))
            .addComponent(PartBaseStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PartBaseStatPanelLayout.setVerticalGroup(
            PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PartBaseStatPanelLayout.createSequentialGroup()
                .addComponent(PartBaseStatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartBaseHealthLabel)
                    .addComponent(PartBaseHealthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartBaseAttackLabel)
                    .addComponent(PartBaseAttackField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartBaseDefenseLabel)
                    .addComponent(PartBaseDefenseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PartBaseStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PartBaseSpeedLabel)
                    .addComponent(PartBaseSpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        PartTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Arm", "Body", "Head", "Leg" }));
        PartTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartTypeComboActionPerformed(evt);
            }
        });

        BodySlotLabel.setText("Slots:");

        BodySlotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "X", "Y", "Z", "Rotation", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BodySlotTable.getTableHeader().setReorderingAllowed(false);
        BodySlotTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BodySlotTableMouseClicked(evt);
            }
        });
        BodySlotTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BodySlotTableKeyPressed(evt);
            }
        });
        BodySlotScrollPane.setViewportView(BodySlotTable);
        if (BodySlotTable.getColumnModel().getColumnCount() > 0) {
            BodySlotTable.getColumnModel().getColumn(0).setResizable(false);
            BodySlotTable.getColumnModel().getColumn(1).setResizable(false);
            BodySlotTable.getColumnModel().getColumn(2).setResizable(false);
            BodySlotTable.getColumnModel().getColumn(3).setResizable(false);
            BodySlotTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout BodySlotPanelLayout = new javax.swing.GroupLayout(BodySlotPanel);
        BodySlotPanel.setLayout(BodySlotPanelLayout);
        BodySlotPanelLayout.setHorizontalGroup(
            BodySlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodySlotPanelLayout.createSequentialGroup()
                .addGroup(BodySlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BodySlotLabel)
                    .addComponent(BodySlotScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        BodySlotPanelLayout.setVerticalGroup(
            BodySlotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodySlotPanelLayout.createSequentialGroup()
                .addComponent(BodySlotLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BodySlotScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout EditPanelLayout = new javax.swing.GroupLayout(EditPanel);
        EditPanel.setLayout(EditPanelLayout);
        EditPanelLayout.setHorizontalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PartImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(EditPanelLayout.createSequentialGroup()
                        .addComponent(PartDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditPanelLayout.createSequentialGroup()
                                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PartNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PartPivotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PartBaseStatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PartTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BodySlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        EditPanelLayout.setVerticalGroup(
            EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditPanelLayout.createSequentialGroup()
                .addComponent(PartImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(EditPanelLayout.createSequentialGroup()
                        .addGroup(EditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(EditPanelLayout.createSequentialGroup()
                                .addComponent(PartNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PartPivotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PartBaseStatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PartTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(BodySlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SaveButton))
                    .addComponent(PartDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AddButton.setText("New Part");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PartTypePane)
                    .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(EditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PartTypePane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddButton))
                    .addComponent(EditPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold desc="Event Handlers" defaultstate="collapsed">
    private void PartImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartImageButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> browseImage());
    }//GEN-LAST:event_PartImageButtonActionPerformed

    private void PartDisplayPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PartDisplayPanelMouseMoved
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (image != null)
                moveCrosshairs(evt.getX() - imagePanel.getX(), 
                        evt.getY() - imagePanel.getY());
        });
    }//GEN-LAST:event_PartDisplayPanelMouseMoved

    private void PartDisplayPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PartDisplayPanelMouseEntered
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (image != null) {
                drawCrosshairs = true;
                moveCrosshairs(evt.getX(), evt.getY());
            }
        });
    }//GEN-LAST:event_PartDisplayPanelMouseEntered

    private void PartDisplayPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PartDisplayPanelMouseExited
         javax.swing.SwingUtilities.invokeLater(() -> {
            if (!pivotSet) {
                drawCrosshairs = false;
                repaint();
            }
         });
    }//GEN-LAST:event_PartDisplayPanelMouseExited

    private void PartDisplayPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PartDisplayPanelMouseClicked
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Ensure there is an image.
            if (image != null) {
                // Check if a Body part is being edited.
                if ("Body".equals(PartTypeCombo.getSelectedItem().toString())) {
                    // Check if a row in the slot table is being edited.
                    int row = BodySlotTable.getSelectedRow();
                    if (row == -1)
                        // Add a slot at the specified position.
                        addSlot(evt.getX() - imagePanel.getX(), 
                                evt.getY() - imagePanel.getY());
                    else
                        moveSlot(row, evt.getX() - imagePanel.getX(),
                                evt.getY() - imagePanel.getY());
                }
                // Otherwise, ensure there is an image.
                else
                    pivotSet = !pivotSet;
            }
        });
    }//GEN-LAST:event_PartDisplayPanelMouseClicked

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (checkValidity())
                savePart();
        });
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void PartBaseHealthFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PartBaseHealthFieldFocusGained
        PartBaseHealthField.selectAll();
    }//GEN-LAST:event_PartBaseHealthFieldFocusGained

    private void PartBaseAttackFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PartBaseAttackFieldFocusGained
        PartBaseAttackField.selectAll();
    }//GEN-LAST:event_PartBaseAttackFieldFocusGained

    private void PartBaseDefenseFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PartBaseDefenseFieldFocusGained
        PartBaseDefenseField.selectAll();
    }//GEN-LAST:event_PartBaseDefenseFieldFocusGained

    private void PartBaseSpeedFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PartBaseSpeedFieldFocusGained
        PartBaseSpeedField.selectAll();
    }//GEN-LAST:event_PartBaseSpeedFieldFocusGained

    private void LegsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_LegsListValueChanged
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (LegsList.getSelectedValue() != null) {
                ArmsList.clearSelection();
                BodiesList.clearSelection();
                HeadsList.clearSelection();
                loadPart(Parts.TYPE_LEG, LegsList.getSelectedValue());
            }
        });
    }//GEN-LAST:event_LegsListValueChanged

    private void ArmsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ArmsListValueChanged
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (ArmsList.getSelectedValue() != null) {
                HeadsList.clearSelection();
                BodiesList.clearSelection();
                LegsList.clearSelection();
                loadPart(Parts.TYPE_ARM, ArmsList.getSelectedValue());
            }
        });
    }//GEN-LAST:event_ArmsListValueChanged

    private void BodiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_BodiesListValueChanged
        javax.swing.SwingUtilities.invokeLater(() -> {
            if (BodiesList.getSelectedValue() != null) {
                ArmsList.clearSelection();
                HeadsList.clearSelection();
                LegsList.clearSelection();
                loadPart(Parts.TYPE_BODY, BodiesList.getSelectedValue());
            }
        });
    }//GEN-LAST:event_BodiesListValueChanged

    private void HeadsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_HeadsListValueChanged
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (HeadsList.getSelectedValue() != null) {
                    ArmsList.clearSelection();
                    BodiesList.clearSelection();
                    LegsList.clearSelection();
                    loadPart(Parts.TYPE_HEAD, HeadsList.getSelectedValue());
                }
            }
        });
    }//GEN-LAST:event_HeadsListValueChanged

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> add());
    }//GEN-LAST:event_AddButtonActionPerformed

    private void BodySlotTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BodySlotTableMouseClicked
        // Check if the row was clicked once or twice.
        if (evt.getClickCount() == 2)
            // Clear the selection.
            BodySlotTable.removeRowSelectionInterval(0, 
                    BodySlotTable.getRowCount() - 1);

        // Check the selected row in the table.
        int row = BodySlotTable.getSelectedRow();
        // Set the slot coordinates according to the values in the selected row.
        if (row == -1)
            slot = null;
        else {
            slot = new int[] { (Integer)BodySlotTable.getValueAt(row, 0),
                               (Integer)BodySlotTable.getValueAt(row, 1) };
        }
        repaint();
    }//GEN-LAST:event_BodySlotTableMouseClicked

    private void BodySlotTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BodySlotTableKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed,
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                // Delete the selected row in the table.
                int row = BodySlotTable.getSelectedRow();
                if (row != -1) {
                    ((javax.swing.table.DefaultTableModel)
                            BodySlotTable.getModel()).removeRow(row);
                    slot = null;
                    repaint();
                }
            }
        });
    }//GEN-LAST:event_BodySlotTableKeyPressed

    private void ArmsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ArmsListKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed,
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                // Ensure a part is selected.
                String selected = ArmsList.getSelectedValue();
                if (selected != null)
                    // Delete the part.
                    deletePart(Parts.TYPE_ARM, selected);
            }
        });
    }//GEN-LAST:event_ArmsListKeyPressed

    private void BodiesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BodiesListKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed,
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                // Ensure a part is selected.
                String selected = BodiesList.getSelectedValue();
                if (selected != null)
                    // Delete the part.
                    deletePart(Parts.TYPE_BODY, selected);
            }
        });
    }//GEN-LAST:event_BodiesListKeyPressed

    private void HeadsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HeadsListKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed,
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                // Ensure a part is selected.
                String selected = HeadsList.getSelectedValue();
                if (selected != null)
                    // Delete the part.
                    deletePart(Parts.TYPE_HEAD, selected);
            }
        });
    }//GEN-LAST:event_HeadsListKeyPressed

    private void LegsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LegsListKeyPressed
        javax.swing.SwingUtilities.invokeLater(() -> {
            // Check if the delete key was pressed,
            if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                // Ensure a part is selected.
                String selected = LegsList.getSelectedValue();
                if (selected != null)
                    // Delete the part.
                    deletePart(Parts.TYPE_LEG, selected);
            }
        });
    }//GEN-LAST:event_LegsListKeyPressed

    private void PartTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartTypeComboActionPerformed
        javax.swing.SwingUtilities.invokeLater(() -> {
            if ("Body".equals(PartTypeCombo.getSelectedItem().toString())) {
                PartPivotXField.setText("");
                PartPivotYField.setText("");
                pivotSet = false;
            }
            else {
                ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                        .setRowCount(0);
                slot = null;
                repaint();
            }
        });
    }//GEN-LAST:event_PartTypeComboActionPerformed
    // </editor-fold>
    
    // <editor-fold desc="Main" defaultstate="collapsed">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PartEditor().setVisible(true);
            }
        });
    }
    // </editor-fold>

    // <editor-fold desc="GUI Variables" defaultstate="collapsed">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JList<String> ArmsList;
    private javax.swing.JPanel ArmsPanel;
    private javax.swing.JScrollPane ArmsScrollPane;
    private javax.swing.JList<String> BodiesList;
    private javax.swing.JPanel BodiesPanel;
    private javax.swing.JScrollPane BodiesScrollPane;
    private javax.swing.JLabel BodySlotLabel;
    private javax.swing.JPanel BodySlotPanel;
    private javax.swing.JScrollPane BodySlotScrollPane;
    private javax.swing.JTable BodySlotTable;
    private javax.swing.JPanel EditPanel;
    private javax.swing.JList<String> HeadsList;
    private javax.swing.JPanel HeadsPanel;
    private javax.swing.JScrollPane HeadsScrollPane;
    private javax.swing.JList<String> LegsList;
    private javax.swing.JPanel LegsPanel;
    private javax.swing.JTextField PartBaseAttackField;
    private javax.swing.JLabel PartBaseAttackLabel;
    private javax.swing.JTextField PartBaseDefenseField;
    private javax.swing.JLabel PartBaseDefenseLabel;
    private javax.swing.JTextField PartBaseHealthField;
    private javax.swing.JLabel PartBaseHealthLabel;
    private javax.swing.JTextField PartBaseSpeedField;
    private javax.swing.JLabel PartBaseSpeedLabel;
    private javax.swing.JLabel PartBaseStatLabel;
    private javax.swing.JPanel PartBaseStatPanel;
    private javax.swing.JPanel PartDisplayPanel;
    private javax.swing.JButton PartImageButton;
    private javax.swing.JTextField PartImageField;
    private javax.swing.JLabel PartImageLabel;
    private javax.swing.JPanel PartImagePanel;
    private javax.swing.JTextField PartNameField;
    private javax.swing.JLabel PartNameLabel;
    private javax.swing.JPanel PartNamePanel;
    private javax.swing.JLabel PartPivotLabel;
    private javax.swing.JPanel PartPivotPanel;
    private javax.swing.JTextField PartPivotXField;
    private javax.swing.JLabel PartPivotXLabel;
    private javax.swing.JTextField PartPivotYField;
    private javax.swing.JLabel PartPivotYLabel;
    private javax.swing.JComboBox<String> PartTypeCombo;
    private javax.swing.JTabbedPane PartTypePane;
    private javax.swing.JButton SaveButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // <editor-fold desc="Added Methods" defaultstate="collapsed">
    private void add() {
        ArmsList.clearSelection();
        BodiesList.clearSelection();
        HeadsList.clearSelection();
        LegsList.clearSelection();
        disableFields();
        enableFields();
        browseImage();
    }
    
    // Adds a row to the slot table with default values for all values.
    private void addSlot() {
        addSlot(0, 0);
    }
    
    // Adds a row to the slot table with default values for all values and the
    // specified x and y values.
    private void addSlot(int x, int y) {
        ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                .addRow(new Object[] { x, y, 1, 0, "Arm" });
        // Set the selected row to the newly added row.
        BodySlotTable.setRowSelectionInterval(BodySlotTable.getRowCount() - 1,
                BodySlotTable.getRowCount() - 1);
        // Set the slot.
        slot = new int[] { x, y };
        repaint();
    }
    
    // Let the user browse for an image file.
    private void browseImage() {
        // Prompt the user to pick an image file.
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser(new java.io.File("").getAbsolutePath());
        chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                "Image Files", "jpg", "jpeg", "gif", "png", "bmp"));
        
        // Check if the user picked a file.
        if (chooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            try {
                // Save the selected file.
                imageFile = chooser.getSelectedFile();
                // Attempt to retrieve an image from the file.
                image = javax.imageio.ImageIO.read(imageFile);
                // Load the image's path into the image field.
                PartImageField.setText(imageFile.getAbsolutePath());
                // Reset the pivot position fields.
                PartPivotXField.setText("");
                PartPivotYField.setText("");
                pivotSet = false;
                // Center the ImagePanel in the display panel.
                imagePanel.center();
                // Repaint the screen.
                repaint();
            } catch (java.io.IOException e) {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Could not load image from the selected file.",
                        "Could not load image",
                        javax.swing.JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }
    
    // Checks if all fields are valid to create a new part.
    private boolean checkValidity() {
        // Check image.
        if (image == null) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must choose a valid image.",
                    "No image",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        // Check name.
        if ("".equals(PartNameField.getText())) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must choose a name.",
                    "No name",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        // Check if Body is not being edited.
        if (!"Body".equals(PartTypeCombo.getSelectedItem().toString())) {
            // Check pivot.
            if (!pivotSet) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "You must set a pivot position.",
                        "No pivot",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        // Check stats.
        try { Integer.parseInt(PartBaseHealthField.getText()); }
        catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must set a base health.",
                    "No base health",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try { Integer.parseInt(PartBaseAttackField.getText()); }
        catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must set a base attack.",
                    "No base attack",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try { Integer.parseInt(PartBaseDefenseField.getText()); }
        catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must set a base defense.",
                    "No base defense",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try { Integer.parseInt(PartBaseSpeedField.getText()); }
        catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "You must set a base speed.",
                    "No base speed",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    // Deletes the given part file after prompting the user to ensure they
    // they want to proceed with it.
    private void deletePart(int partType, String partName) {
        // Confirm that the user wants to delete the part file.
        if (javax.swing.JOptionPane.showConfirmDialog(this, 
                "Are you sure you would like to delete " + partName + "?") 
                == javax.swing.JOptionPane.YES_OPTION) {
            // Delete the file.
            Parts.delete(partType, partName);
            // Refresh the files.
            updateFileLists();
            // Disable the fields.
            disableFields();
        }
    }
    
    // Disables all fields so that the user cannot edit anything.
    private void disableFields() {
        image = null;
        PartImageField.setText("");
        PartImageButton.setEnabled(false);
        PartNameField.setText("");
        PartNameField.setEnabled(false);
        PartPivotXField.setText("");
        PartPivotYField.setText("");
        PartBaseHealthField.setText("");
        PartBaseHealthField.setEnabled(false);
        PartBaseAttackField.setText("");
        PartBaseAttackField.setEnabled(false);
        PartBaseDefenseField.setText("");
        PartBaseDefenseField.setEnabled(false);
        PartBaseSpeedField.setText("");
        PartBaseSpeedField.setEnabled(false);
        PartTypeCombo.setEnabled(false);
        SaveButton.setEnabled(false);
        ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                .setRowCount(0);
        slot = null;
        BodySlotTable.setEnabled(false);
        repaint();
    }
    
    private void enableFields() {
        PartImageButton.setEnabled(true);
        PartNameField.setEnabled(true);
        PartBaseHealthField.setEnabled(true);
        PartBaseAttackField.setEnabled(true);
        PartBaseDefenseField.setEnabled(true);
        PartBaseSpeedField.setEnabled(true);
        PartTypeCombo.setEnabled(true);
        SaveButton.setEnabled(true);
        repaint();
    }
    
    // Retrieves all the arm slots from the slot table.
    private Slot<Arm>[] getArmSlots() {
        java.util.ArrayList<Slot<Arm>> slots = new java.util.ArrayList<>();
        
        // Iterate through each row in the slots table.
        for (int r = 0; r < BodySlotTable.getRowCount(); r++)
            // Check if the row contains an Arm slot.
            if ("Arm".equals(BodySlotTable.getValueAt(r, 4)))
                // Retrieve the arm slot from the table.
                slots.add((Slot<Arm>)getSlot(r, new Arm[0]));
        
        return slots.toArray((Slot<Arm>[])new Slot[0]);
    }
    
    // Retrieves all the head slots from the slot table.
    private Slot<Head>[] getHeadSlots() {
        java.util.ArrayList<Slot<Head>> slots = new java.util.ArrayList<>();
        
        // Iterate through each row in the slots table.
        for (int r = 0; r < BodySlotTable.getRowCount(); r++)
            // Check if the row contains a Head slot.
            if ("Head".equals(BodySlotTable.getValueAt(r, 4)))
                // Retrieve the Head slot from the table.
                slots.add((Slot<Head>)getSlot(r, new Head[0]));
        
        return slots.toArray((Slot<Head>[])new Slot[0]);
    }
    
    // Retrieves all the arm slots from the slot table.
    private Slot<Leg>[] getLegSlots() {
        java.util.ArrayList<Slot<Leg>> slots = new java.util.ArrayList<>();
        
        // Iterate through each row in the slots table.
        for (int r = 0; r < BodySlotTable.getRowCount(); r++)
            // Check if the row contains a Leg slot.
            if ("Leg".equals(BodySlotTable.getValueAt(r, 4)))
                // Retrieve the Leg slot from the table.
                slots.add((Slot<Leg>)getSlot(r, new Leg[0]));
        
        return slots.toArray((Slot<Leg>[])new Slot[0]);
    }
    
    // Retrieves the slot from the given row of the table.
    private <T extends Part> Slot<T> getSlot(int r, T[] type) {
        // Retrieve inputs from the table row.
        int x = (int)BodySlotTable.getValueAt(r, 0);
        int y = (int)BodySlotTable.getValueAt(r, 1);
        int z = (int)BodySlotTable.getValueAt(r, 2);
        int rotation = (int)BodySlotTable.getValueAt(r, 3);
        
        // Determine the type of the Slot object.
        Slot<T> slot = null;
        switch(BodySlotTable.getValueAt(r, 4).toString()) {
            case "Arm":
                slot = new Slot<>(x, y, z);
                break;
            case "Head":
                slot = new Slot<>(x, y, z);
                break;
            case "Leg":
                slot = new Slot<>(x, y, z);
        }
        
        // Set the rotation of the slot.
        slot.setRotationDegrees(rotation);
        
        return slot;
    }
    
    // Sets up the Slot table.
    private void initTable() {
        // Retrieve the table's current model.
        javax.swing.table.DefaultTableModel model = 
                (javax.swing.table.DefaultTableModel)BodySlotTable.getModel();
        // Remove any rows fromt the table.
        model.setRowCount(0);
        // Create a new Cell Editor for the type column.
        BodySlotTable.getColumnModel().getColumn(4).setCellEditor(
                new javax.swing.DefaultCellEditor(
                        new javax.swing.JComboBox<>(
                                new String[] { "Arm", "Head", "Leg" }
                        )
                )
        );
    }

    public PartEditor(GraphicsConfiguration gc) {
        super(gc);
    }
    
    // Loads the part into the fields.
    private void loadPart(int partType, String partName) {
        // Enable the fields.
        disableFields();
        enableFields();
        
        // Load the part from the file.
        Part part = Parts.load(partType, partName);
        imageFile = new java.io.File(part.getImageFile());
        image = part.getImage();
        imagePanel.center();
        PartImageField.setText(part.getImageFile());
        PartNameField.setText(partName);
        drawCrosshairs = true;
        PartBaseHealthField.setText("" + part.getBaseHealth());
        PartBaseAttackField.setText("" + part.getBaseAttack());
        PartBaseDefenseField.setText("" + part.getBaseDefense());
        PartBaseSpeedField.setText("" + part.getBaseSpeed());
        PartTypeCombo.setSelectedIndex(partType - 1);
        PartTypeCombo.setEnabled(false);
        
        // Check if the part is a body or not.
        if (part instanceof Body) {
            // Load the arm slots into the table.
            for (Slot<Arm> s : ((Body)part).getArmSlots())
                ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                        .addRow(new Object[] { s.getX(), s.getY(), s.getZ(), 
                            (int)s.getRotationDegrees(), "Arm" });
            
            // Load the head slots into the table.
            for (Slot<Head> s : ((Body)part).getHeadSlots())
                ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                        .addRow(new Object[] { s.getX(), s.getY(), s.getZ(), 
                            (int)s.getRotationDegrees(), "Head" });
            
            // Load the leg slots into the table.
            for (Slot<Leg> s : ((Body)part).getLegSlots())
                ((javax.swing.table.DefaultTableModel)BodySlotTable.getModel())
                        .addRow(new Object[] { s.getX(), s.getY(), s.getZ(), 
                            (int)s.getRotationDegrees(), "Leg" });
            
            pivotSet = false;
        }
        else {
            // Set the Pivot information.
            PartPivotXField.setText("" + part.getPivotX());
            crossX = part.getPivotX();
            PartPivotYField.setText("" + part.getPivotY());
            crossY = part.getPivotY();
            pivotSet = true;
        }
    }
    
    private void moveCrosshairs(int x, int y) {
        // Check if the crosshairs should be moved.
        if (!pivotSet) {
            // Move the crosshairs to the mouse position.
            crossX = x;
            crossY = y;
            
            // Ensure a body is not being edited.
            if (!"Body".equals(PartTypeCombo.getSelectedItem().toString())) {
                // Display the X and Y values in the pivot fields.
                PartPivotXField.setText("" + crossX);
                PartPivotYField.setText("" + crossY);
            }
            // Repaint the screen.
            repaint();
        }
    }
    
    private void moveSlot(int r, int x, int y) {
        // Set the slot position.
        slot = new int[] { x, y };
        // Set the selected position in the table.
        BodySlotTable.setValueAt(x, r, 0);
        BodySlotTable.setValueAt(y, r, 1);
        
        repaint();
    }
    
    // Save the part to the appropriate directory.
    private void savePart() {
        // Determine the type of body part being saved.
        int partType = 0;
        int pivotX = 0;
        int pivotY = 0;
        Slot<Arm>[] arms = null;
        Slot<Head>[] heads = null;
        Slot<Leg>[] legs = null;
        switch (PartTypeCombo.getSelectedItem().toString()) {
            case "Arm":
                partType = Parts.TYPE_ARM;
                pivotX = Integer.parseInt(PartPivotXField.getText());
                pivotY = Integer.parseInt(PartPivotYField.getText());
                break;
            case "Body":
                partType = Parts.TYPE_BODY;
                arms = getArmSlots();
                heads = getHeadSlots();
                legs = getLegSlots();
                break;
            case "Head":
                partType = Parts.TYPE_HEAD;
                pivotX = Integer.parseInt(PartPivotXField.getText());
                pivotY = Integer.parseInt(PartPivotYField.getText());
                break;
            case "Leg":
                partType = Parts.TYPE_LEG;
                pivotX = Integer.parseInt(PartPivotXField.getText());
                pivotY = Integer.parseInt(PartPivotYField.getText());
                break;
        }
        
        // Attempt to save the Part.
        String error = Parts.save(
                partType, imageFile, PartNameField.getText(), 
                pivotX,
                pivotY,
                Integer.parseInt(PartBaseHealthField.getText()), 
                Integer.parseInt(PartBaseAttackField.getText()),
                Integer.parseInt(PartBaseDefenseField.getText()),
                Integer.parseInt(PartBaseSpeedField.getText()), 
                arms, heads, legs
        );
        
        // If the save failed, display the error message.
        if (error != null)
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    error,
                    "Error saving part",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        // If there was no error, display a confirmation message.
        else
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Part was successfully saved.",
                    "Save successful",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE
            );
        
        // Update the lists.
        updateFileLists();
    }
    
    // Updates all the file lists to show any new files that are in the Part
    // res folders.
    private void updateFileLists() {
        // Set the list model to the list of files in the directory.
        ArmsList.setListData(Parts.getPartNames(Parts.ARMS_RES_DIR));
        // Set the list model to the list of files in the directory.
        BodiesList.setListData(Parts.getPartNames(Parts.BODIES_RES_DIR));
        // Set the list model to the list of files in the directory.
        HeadsList.setListData(Parts.getPartNames(Parts.HEADS_RES_DIR));
        // Set the list model to the list of files in the directory.
        LegsList.setListData(Parts.getPartNames(Parts.LEGS_RES_DIR));
    }
    
    // Panel to draw the image.
    private class ImagePanel extends javax.swing.JPanel {
        
        public void center() {
            setLocation(PartDisplayPanel.getWidth() / 2 - image.getWidth(null) / 2,
                    PartDisplayPanel.getHeight() / 2 - image.getHeight(null) / 2);
            setSize(image.getWidth(null), image.getHeight(null));
        }
        
        @Override
        protected void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            
            // Paint the image on the display panel.
            if (image != null)
                g.drawImage(
                        image,
                        0,
                        0,
                        null
                );

            // Paint the crosshairs on the display panel.
            if (drawCrosshairs) {
                g.setColor(java.awt.Color.WHITE);
                // Draw horizontal line.
                g.drawLine(
                        crossX - CROSSHAIR_SIZE / 2,
                        crossY,
                        crossX + CROSSHAIR_SIZE / 2,
                        crossY
                );
                // Draw vertical line.
                g.drawLine(
                        crossX,
                        crossY - CROSSHAIR_SIZE / 2,
                        crossX,
                        crossY + CROSSHAIR_SIZE / 2
                );
            }
            
            // Paint the slot on the display panel.
            if (slot != null) {
                g.setColor(java.awt.Color.WHITE);
                // Draw circle centered at the slot's coordiantes.
                g.fillOval(
                        slot[0] - SLOT_RADIUS, 
                        slot[1] - SLOT_RADIUS,
                        SLOT_RADIUS * 2,
                        SLOT_RADIUS * 2);
            }
        }
    }
    // </editor-fold>
}
