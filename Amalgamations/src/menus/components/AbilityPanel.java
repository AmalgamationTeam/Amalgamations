package menus.components;

import amalgamation.abilities.Ability;
import amalgamation.abilities.Attack;

/**
 * An AbilityPanel is a GUI component that can be used to visualize and display
 * an Ability.
 * 
 * @author Caleb Rush
 */
public class AbilityPanel extends acomponent.AComponent {
    // The color of the background when the Ability is unusable.
    private final static java.awt.Color BG_DISABLED 
            = new java.awt.Color(189, 189, 189);
    // The color of the background when the Ability is usable.
    private final static java.awt.Color BG_ENABLED
            = java.awt.Color.WHITE;
    // The color of the background when the panel is hovered over.
    private final static java.awt.Color BG_HOVERED
            = new java.awt.Color(76, 175, 80);
    // The color of the text when the Ability is unusable.
    private final static java.awt.Color TEXT_DISABLED
            = new java.awt.Color(97, 97, 97);
    // The color of the name when the Ability is a regular Ability.
    private final static java.awt.Color NAME_ABILITY 
            = new java.awt.Color(33, 150, 243);
    // The color of the name when the Ability is an Attack.
    private final static java.awt.Color NAME_ATTACK 
            = new java.awt.Color(244,67,54);
    // The color of the property text when the Ability is enabled.
    private final static java.awt.Color TEXT_ENABLED
            = new java.awt.Color(96,125,139);
    
    // The Ability this panel is creating a view for.
    private Ability ability;
    // The Runnable to run when the panel is clicked.
    private Runnable clickAction;
    
    public AbilityPanel() {
        initComponents();
    }

    /**
     * Creates new form AbilityPanel
     */
    public AbilityPanel(Ability ability) {
        initComponents();
        setAbility(ability);
    }

    // <editor-fold desc="GUI Code" defaultstate="collapsed" >
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NameLabel = new javax.swing.JLabel();
        CooldownLabel = new javax.swing.JLabel();
        PowerAccuracyLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 2, new java.awt.Color(102, 102, 102)));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });

        NameLabel.setBackground(new java.awt.Color(255, 255, 255));
        NameLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 28)); // NOI18N
        NameLabel.setForeground(new java.awt.Color(244, 67, 54));
        NameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NameLabel.setText("Punch");

        CooldownLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        CooldownLabel.setForeground(new java.awt.Color(96, 125, 139));
        CooldownLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CooldownLabel.setText("Cooldown: 3 Turns");

        PowerAccuracyLabel.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 14)); // NOI18N
        PowerAccuracyLabel.setForeground(new java.awt.Color(97, 97, 97));
        PowerAccuracyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PowerAccuracyLabel.setText("Power: 25    Accuracy: 100");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CooldownLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PowerAccuracyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PowerAccuracyLabel)
                .addGap(10, 10, 10)
                .addComponent(CooldownLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        exited();
    }//GEN-LAST:event_formMouseExited

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        entered();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        clicked();
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CooldownLabel;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JLabel PowerAccuracyLabel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    // Changes the value in the cooldown label.
    private void changeCooldown(int cooldown) {
        CooldownLabel.setText(String.format("Cooldown: %d Turns", cooldown));
    }
    
    // Changes the values in the power and accuracy label.
    private void changePowerAccuracy(int power, int accuracy) {
        // Set up the text for the label.
        String text = ability instanceof Attack?
                String.format("Power: %d    ", power):
                "";
        text += String.format("Accuracy: %d%%", accuracy);
        
        // Set the text.
        PowerAccuracyLabel.setText(text);
    }
    
    // Performs the given click action.
    private void clicked() {
        if (clickAction != null && ability.isUsable())
            clickAction.run();
        dehighlight(getWidth() / 2, getHeight() / 2, 0);
        setCursor(java.awt.Cursor.getDefaultCursor());
    }
    
    // Changes the mouse icon and changes the background.
    private void entered() {
        if (ability.isUsable()) {
            stopAnimations();
            highlight(getWidth() / 2, getHeight() / 2, 10);
            setCursor(java.awt.Cursor.getPredefinedCursor(
                    java.awt.Cursor.HAND_CURSOR));
        }
    }
    
    /**
     * Returns the Ability displayed by this panel.
     * 
     * @return the Ability displayed by this panel.
     */
    public Ability getAbility() {
        return ability;
    }
    
    /**
     * Returns the action to be performed when the panel is clicked.
     * 
     * @return the action to be performed when the panel is clicked.
     */
    public Runnable getClickAction() {
        return clickAction;
    }
    
    // Changes the mouse icon and changes the background.
    private void exited() {
        if (ability.isUsable()) {
            stopAnimations();
            dehighlight(getWidth() / 2, getHeight() / 2, 0);
            setCursor(java.awt.Cursor.getDefaultCursor());
        }
    }
    
    /**
     * Sets the Ability displayed by this panel.
     * 
     * @param ability the Ability to be displayed by this panel.
     */
    public void setAbility(Ability ability) {
        this.ability = ability;
        updateView();
    }
    
    /**
     * Sets the action to be run when this Panel is clicked.
     * 
     * The Panel can only be clicked when the contained Ability is usable, so
     * there is no need to check if the Ability is usable inside the passed
     * Runnable.
     * 
     * @param clickAction the Runnable to run when the panel is clicked.
     */
    public void setClickAction(Runnable clickAction) {
        this.clickAction = clickAction;
    }
    
    public void updateView() {
        setHighlightColor(BG_HOVERED);
        NameLabel.setText(ability.getName());
        changePowerAccuracy(ability instanceof Attack? 
                ((Attack)ability).getDamage() : 0,
                ability.getAccuracy());
        if (ability.isUsable()) {
            changeCooldown(ability.getCooldown());
            setBackground(BG_ENABLED);
            NameLabel.setForeground(ability instanceof Attack?
                    NAME_ATTACK : NAME_ABILITY);
            PowerAccuracyLabel.setForeground(TEXT_ENABLED);
            CooldownLabel.setForeground(TEXT_ENABLED);
        }
        else {
            changeCooldown(ability.getCurrentCooldown());
            setBackground(BG_DISABLED);
            NameLabel.setForeground(TEXT_DISABLED);
            PowerAccuracyLabel.setForeground(TEXT_DISABLED);
            CooldownLabel.setForeground(TEXT_DISABLED);
        }
    }
}
